in
in
in
pop cx
pop bx
pop ax
push ax
push 0
jne :aisnotzero
push bx
push cx
call :lineq
jmp :output

:aisnotzero
call :discr
pop dx
push dx
push 0
je :discriszero
push dx
push 0
jb :discrispos
push 0
jmp :output

:discriszero
push bx
push -1
mul
push ax
push 2
mul
div
push 1
jmp :output

:discrispos
push bx
push -1
mul
push dx
sqrrt
sub
push ax
push 2
mul
div
push bx
push -1
mul
push dx
sqrrt
add
push ax
push 2
mul
div
push 2

:output
pop ex
push ex
push 0
jae :zeroorinf
push ex
push 1
je :onerootout
push ex
out
out
out
end
:zeroorinf
push ex
out
end
:onerootout
push ex
out
out
end


:discr
pop Fx
push bx
push bx
mul
push 4
push ax
push cx
mul
mul
sub
push Fx
ret

:lineq
pop Fx
push 0
je :ciszero
push 0
je :biszerobutcisnot
:oneroot
push cx
push -1
mul
push bx
div
push 1
push Fx
ret

:ciszero
push 0
je :biszero
jmp :oneroot
:biszero
push -1
push Fx
ret

:biszerobutcisnot
push 0
push Fx
ret

:out
push Fx
ret
